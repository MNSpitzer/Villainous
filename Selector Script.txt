----#include villainous/customselectorv1
function change_section(player, value, id)
    self.UI.setAttribute(id.." Villains", "active", value)
end

function select_villain(player, value, id)
    switchCharacter(self.UI.getAttribute(id, "section"), id, player.color)
end

function random_villain(player, value, id)
    local chosen = ALL_VILLAINS[math.random(1, #ALL_VILLAINS)]
    switchCharacter(chosen[1], chosen[2], player.color)
end

function getChar(section, char)
    local objects = {}
    if EVERYTHING[section][char] ~= nil then
        objects=EVERYTHING[section][char].data
    end
    if #objects==0 then
        print("Character not found")
    end
    return objects
end

function switchCharacter(section, character, color)
    local my_rot = self.getRotation()
    local objects = getChar(section, character)
    local scale = self.getScale()
    scale.x = 1/scale.x
    scale.z = 1/scale.z

    self.destruct()
    function callback(o)
        o.setRotation({o.getRotation().x, o.getRotation().y+my_rot.y, o.getRotation().z})
    end
    for _,v in ipairs(objects) do
        local new_pos = self.positionToWorld(Vector(v.move_to) * scale)
        spawnObjectJSON({
            json              = v.json,
            position          = new_pos,
            callback_function = callback
        })
    end
        local direction = Vector(0, 4, 12)
    direction:rotateOver("y", my_rot.y)
    -- forward = forward*2
    Player[color].setHandTransform({
        position = self.getPosition()+direction,
        rotation = {0, my_rot.y+180, 0},
        scale = {8, 6, 4}
    })
end


function create_UI()
    local assets = {
        {
            name="header-background",
            url="https://raw.githubusercontent.com/MNSpitzer/Villainous/57489f56a51bf0f99407cdf029b296c004e18c2f/Parchment.png/"
        },
    }
    local toggles = {}
    local total_toggles = 50
    local table_layouts = {}
    ALL_VILLAINS = {}
    for section, villains in pairs(EVERYTHING) do
        if section ~= "Official" then
            local tmp = {tag="ToggleButton", attributes={class="section-button", text=section, id=section}}

            if section == "Playtesting" then
                table.insert(toggles, {tag="Panel", attributes={height=498-total_toggles-50, flexibleHeight=false, preferredHeight=498-total_toggles}})
            end
            table.insert(toggles, tmp)
            total_toggles = total_toggles + 50
            table.insert(table_layouts, {tag="TableLayout", attributes={class="villains", id=section.." Villains", active=false}, children={}})
            local this_villains={}
            for villain, info in pairs(villains) do
                table.insert(this_villains, {villain, info.tooltip})
                table.insert(ALL_VILLAINS, {section, villain})
                table.insert(assets, {name=villain, url=info.image})
            end
            local table_layout = {}
            for y=1, 3 do
                local row = {tag="Row", children={}}
                for x=1, 4 do
                    local cell = {}
                    if #this_villains > 0 then
                        local vil = table.remove(this_villains, 1)
                        cell = {tag="Cell", children={
                            {tag="Button", attributes={id=vil[1], section=section, class="villain-button", image=vil[1]}},
                            {tag="text", attributes={class="Villain-tooltip", text=vil[2]}},
                        }}
                    else
                        cell = {tag="Cell"}
                    end
                    table.insert(row.children, cell)
                end
                table.insert(table_layout, row)
            end
            table_layouts[#table_layouts].children = table_layout
        end
    end
    table_layouts[1].attributes.active=true
    toggles[1].attributes.isOn=True

    table.insert(toggles, {tag="ToggleButton", attributes={class="section-button", text="Random Pirate", id="Random", onClick="random_villain"}})

    local ui ={
        {tag="Defaults", children={
            {tag="ToggleButton", attributes={
                                    class="section-button",
                                    Height=50,
                                    flexibleHeight=false,
                                    preferredHeight=50,
                                    resizeTextForBestFit=true,
                                    image="header-background",
                                    textAlignment="MiddleCenter",
                                    padding="2 2 3 3",
                                    textColor="Black",
                                    onValueChanged="change_section"}},
            {tag="Button", attributes={
                                    class="villain-button",
                                    preserveAspect=true,
                                    onClick="select_villain",
                                    preferredHeight=50,
                                    ignoreLayout=True}},
            {tag="Text", attributes={
                                    class="Villain-tooltip",
                                    color="Clear",
                                    rectAlignment="LowerCenter",
                                    height="30%",
                                    ignoreLayout=true,
                                    fontSize=20,
                                    resizeTextForBestFit=true}},
            {tag="TableLayout", attributes={
                                    class="villains",
                                    position="-19 15 -3",
                                    scale=".25 .25 .25",
                                    Rotation="0 0 180",
                                    width=660,
                                    height=530,
                                    cellSpacing=12,
                                    cellBackgroundColor="Clear"}},
        }},

        {tag="ToggleGroup", attributes={id="sections"}, children={
            {tag="VerticalLayout", attributes={Rotation="180 180 0", position="86 14 -3", width=121, height=498, scale=".25 .25 .25", spacing=10}, children=toggles}
        }},
    }
    for _, layout in ipairs(table_layouts) do
        table.insert(ui, layout)
    end
    self.UI.setCustomAssets(assets)
    Wait.frames(||self.UI.setXmlTable(ui), 10)
end

function onLoad()
    log("Setting everything on "..self.guid)
    EVERYTHING = find_object_by_name("The keeper of information").getTable('EVERYTHING')
    create_UI()
end

function find_object_by_name(name)
    for _, obj in ipairs(getAllObjects()) do
        if obj.getName() == name then return obj end
    end
    return nil
end

----#include villainous/customselectorv1
